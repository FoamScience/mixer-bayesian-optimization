problem:
  # Problem name to prefix output files with
  name: ThermalMixer
  # The base OpenFOAM case; this needs to be fully functional case once paramters/files are substituted.
  template_case: 'annularThermalMixer'
  # Run type: 'optimization' or 'parameter_variation'
  type: 'optimization'
  # Generation models; Either auto or an ordered list of models
  models: auto
  # Experiment paramters
  parameters:
    angularVelocity:
      type: range
      value_type: int
      bounds: [20, 50]
      log_scale: False
    nRotorBlades:
      type: choice
      value_type: int
      values: [3, 4, 5, 6]
      is_ordered: True
    rotorBladeRadius:
      type: range
      value_type: float
      bounds: [0.01, 0.02]
      log_scale: False
    rotorBladeHeight:
      type: range
      value_type: float
      bounds: [0.03, 0.05]
      log_scale: False
    rotorBladeTiltAngle:
      type: range
      value_type: float
      bounds: [0, 15] # some of these angles will not be feasible
      log_scale: False
  scopes:
    "/constant/caseSettings":
      angularVelocity: "meshMotionProperties.omega"
    "/constant/cadDict":
      nRotorBlades: "rotor.blades.n"
      rotorBladeRadius: "rotor.blades.radius"
      rotorBladeHeight: "rotor.blades.height"
      rotorBladeTiltAngle: "rotor.blades.tiltAngle"
  # Experiment objectives. Metric values are fetched through shell commands in the working directory of
  # the specific trial
  objectives:
    PowerConsumption:
      mode: 'shell'
      command: ['./obj3_power_consumption.sh']
      threshold: 4
      minimize: True
      lower_is_better: True
    MixingQuality:
      mode: 'shell'
      command: ['./obj2_mixing_quality.sh']
      threshold: 100
      minimize: True
      lower_is_better: True
    BladeDurability:
      mode: 'shell'
      # A little (optional) preparation before metrics are evaluated
      # This command needs to be !interactive! as it runs in blocking mode and it's only active in SLURM metric value mode
      # Think: salloc
      prepare: ['echo', '$CASE_NAME']
      # How to evaluate the objective metric?
      # This command needs to return a convertible-to-float value
      command: ['./obj1_durability.sh']
      threshold: 40
      minimize: True
      lower_is_better: True

meta:
  # When clonging template case, specify extra files/dirs to clone
  case_subdirs_to_clone:
    - obj1_durability.sh
    - obj2_mixing_quality.sh
    - obj3_power_consumption.sh
    - constant/cadDict
    - blade-durability.py
    - geometry
    - 0.orig
    - update-controlDict.py
    - getImage.sh
    - render-results.py
  # Where to clone trial cases (absolute path, leave empty to consider $PWD)
  clone_destination: "./trials/"
  # Case run mode (local, slurm)
  case_run_mode: local
  # How should we run your case?
  # Metric values are extracted through problem.objectives.*.command
  # after completion of the following command
  # The command is processed to provide a couple of variables:
  # - $CASE_PATH: fullpath to **parameter variation case**
  # - $CASE_NAME: generated name of the **parameter variation case**
  case_run_command: ['./Allrun', '/usr/lib/openfoam/openfoam2312']
  # Number of trials to generate:
  # Using SOBOL for paramter variation
  # Model is automatically chosen for optimization studies
  n_trials: 70
  # Number of trials to deploy at the same time (in parallel)
  n_parallel_trials: 4
  # Time To Live for a single trial in seconds
  ttl_trial: 1200
  # Number of seconds to wait for polling initially
  init_poll_wait: 60
  # Rate at which poll interval increases
  poll_factor: 1.5
  # Timeout in hours for the whole experiment
  timeout: 10
  # Try to use SAASBO, default is to use: GPEI
  use_saasbo: False
  # Number of pareto front points to generate
  n_pareto_points: 15
  # When to stop the optimization
  stopping_strategy:
    # If the probablity of improvement falls under this value, stop
    improvement_bar: 1e-2
    # Minimal trials before considering the stopping strategy
    min_trials: 25
    # How many trials to consider for computing the improvement probability
    window_size: 10

validate:
  cross_validate: True # Run Ax's cross validation (doesn't run new trials)
  # Extra trials to run for validation
  trials:
    - angularVelocity: 50
      nRotorBlades: 5
      rotorBladeRadius: 0.0161
      rotorBladeHeight: 0.0374
      rotorBladeTiltAngle: 7.37
  # Generate pareto-frontier points and run them for validation
  # Only works if it's a multi-objective optimization
  pareto_frontier: 5
  primary_objective: "MixingQuality"
  secondary_objective: "BladeDurability"

visualize:
  # How often to update foamDash graphs
  update_interval: 1200
  # How many latest trials to generate pictures of
  n_figures: 2
  # A threshold zscore to filter outliers if some trials get penalized
  zscore_bar: 15
  figure_generator: ['./getImage.sh']
  graph_height: 400
  # Interface settings for Dash
  host: '0.0.0.0'
  port: 8888
